class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
 
    def add_courses(self, course_name):
        self.finished_courses.append(course_name)  
         
    def rate_lecturer(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in self.courses_in_progress and course in lecturer.courses_attached:
            if course in lecturer.grades:
                    lecturer.grades[course] += [grade]
            else:
                    lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'
        
    def _average_grade_hw_(self):
        s = 0
        n = 0
        for course in self.grades:
            s += sum(self.grades[course])
            n += len(self.grades[course])
        a = round(s/n, 2)
        return a
    def __str__(self):
        return f"Имя: {self.name}\nФамилия: {self.surname}\nСредняя оценка за домашние задания: {self._average_grade_hw_()}\n\
Курсы в процессе изучения: {', '.join(self.courses_in_progress)}\nЗавершённые курсы : {', '.join(self.finished_courses)}"
    def __lt__(self, other):
        return self._average_grade_hw_() < other._average_grade_hw_ ()  
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Reviewer(Mentor):
    def __init__(self,name,surname):
        super().__init__(name, surname)
        
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                    student.grades[course] += [grade]
            else:
                    student.grades[course] = [grade]
        else:
            return 'Ошибка' 
            
    def __str__(self):
        return f"Имя: {self.name}\nФамилия: {self.surname}"
    
    
class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}
        
    def _average_grade_(self):
        s = 0
        n = 0
        for course in self.grades:
            s += sum(self.grades[course])
            n += len(self.grades[course])
        a = round(s/n, 2)
        return a  
    
    def __str__(self):
        return f"Имя: {self.name}\nФамилия: {self.surname}\nСредняя оценка за лекции: {self._average_grade_()}"
    def __lt__(self, other):
        return self._average_grade_() < other._average_grade_()
    
    
    
best_student = Student('Ruoy', 'Eman', 'male')
best_student.courses_in_progress += ['Python']
best_student.courses_in_progress += ['Java']
good_student = Student('Jeff', 'Butler', 'male')
good_student.courses_in_progress += ['Python']
good_student.courses_in_progress += ['Java']
cool_lecturer = Lecturer('Some', 'Buddy')
cool_lecturer.courses_attached += ['Python']
cool_lecturer.courses_attached += ['Java']
smart_lecturer = Lecturer('John', 'Smith')
smart_lecturer.courses_attached += ['Python']
smart_lecturer.courses_attached += ['Java']
best_student.rate_lecturer(smart_lecturer, 'Python', 6)
best_student.rate_lecturer(smart_lecturer, 'Java', 7)
best_student.rate_lecturer(cool_lecturer, 'Python', 9)
best_student.rate_lecturer(cool_lecturer, 'Java', 8)
good_student.rate_lecturer(smart_lecturer, 'Python', 8)
good_student.rate_lecturer(smart_lecturer, 'Java', 6)
good_student.rate_lecturer(cool_lecturer, 'Python', 10)
good_student.rate_lecturer(cool_lecturer, 'Java', 10)
best_student.add_courses('ВВедение в программирование')
some_reviewer = Reviewer('Some', 'Buddy')
some_reviewer.courses_attached += ['Python','Java']
some_reviewer.rate_hw(best_student,'Python',10)
some_reviewer.rate_hw(best_student,'Python',10)
some_reviewer.rate_hw(good_student,'Python',9)
some_reviewer.rate_hw(good_student,'Python',8)
some_reviewer.rate_hw(best_student,'Java',8)
some_reviewer.rate_hw(best_student,'Java',10)
some_reviewer.rate_hw(good_student,'Java',9)
some_reviewer.rate_hw(good_student,'Java',6) 



print(cool_lecturer)
print(some_reviewer)
print(best_student)
print(smart_lecturer)
print(good_student)





def ave_st_course_rate(students, course):
    s = 0
    n = 0
    for student in students:
        if isinstance(student, Student) and course in student.courses_in_progress:
            s += sum(student.grades[course])
            n += len(student.grades[course])           
        else:
            return "Ошибка"
    return round(s/n, 2)
def ave_lect_course_rate(lecturers, course):
    s = 0
    n = 0
    for lecturer in lecturers:
        if isinstance(lecturer,Lecturer) and course in lecturer.courses_attached:
            s += sum(lecturer.grades[course])
            n += len(lecturer.grades[course])
        else:
            return "Ошибка"
    return round(s/n, 2)


print(best_student > good_student)
print(cool_lecturer < smart_lecturer)
print(ave_st_course_rate([best_student,good_student], 'Python'))
print(ave_lect_course_rate([cool_lecturer, smart_lecturer], 'Java'))